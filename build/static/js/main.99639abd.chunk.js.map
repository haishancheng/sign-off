{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["confirm","modal_default","a","App","state","timeList","hasSignOff","currentDay","signOff","_this$state","_this","moment","format","setState","prevState","newTimeList","Object","toConsumableArray","concat","time","localStorage","setItem","JSON","stringify","info","title","delete","index","date","iconType","okText","okType","cancelText","onOk","console","log","splice","onCancel","warning","this","parse","getItem","_this2","totalHour","totalMin","totalSec","forEach","item","arr","split","parseInt","averageTime","Math","floor","length","timePointItem","point","class","find","valueOf","averageTimeClass","react_default","createElement","className","map","key","onClick","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99639abd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment'\nimport { Modal } from 'antd';\nimport './App.css'\nconst confirm = Modal.confirm;\n\nclass App extends Component {\n\n  state = {\n    timeList: [],\n    hasSignOff: \"\",\n    currentDay: \"\"\n  }\n\n  signOff = () => {\n    let {hasSignOff, currentDay} = this.state\n    if (hasSignOff === \"yes\" && moment().format(\"YYYY-MM-DD\") === currentDay) {\n      Modal.info({\n        title: '当天已签退，如签退时间有误，请先删除！',\n      }); \n      return\n    }\n    this.setState((prevState) => {\n      let newTimeList = [...prevState.timeList, {time: moment().format('YYYY-MM-DD HH:mm:ss')}]\n      localStorage.setItem(\"timeList\", JSON.stringify(newTimeList))\n      localStorage.setItem(\"hasSignOff\", \"yes\")\n      localStorage.setItem(\"currentDay\", moment().format(\"YYYY-MM-DD\"))\n      return {\n        timeList: newTimeList,\n        hasSignOff: \"yes\",\n        currentDay: moment().format(\"YYYY-MM-DD\")\n      }\n    })\n  }\n  \n  delete = (index, date) => {\n    if (moment().format(\"YYYY-MM-DD\") !== date) {\n      Modal.warning({\n        title: '目前只能删除添加当天的时间哦~',\n      })\n      return\n    }\n    confirm({\n      title: '确定删除本天签退记录？',\n      iconType: 'close-circle',\n      okText: '确定',\n      okType: 'danger',\n      cancelText: '取消',\n      onOk: () => {\n        console.log(index);\n        let {timeList} = this.state\n        timeList.splice(index, 1)\n        this.setState({timeList, hasSignOff: \"no\",})\n        localStorage.setItem(\"timeList\", JSON.stringify(timeList))\n        localStorage.setItem(\"hasSignOff\", \"no\")\n      },\n      onCancel() {\n      },\n    });\n  }\n\n  componentWillMount() {\n    this.setState({\n      timeList: JSON.parse(localStorage.getItem(\"timeList\") || \"[]\" ),\n      hasSignOff: localStorage.getItem(\"hasSignOff\"),\n      currentDay: localStorage.getItem(\"currentDay\")\n    })\n  }\n\n  render() {\n    let {timeList} = this.state\n    console.log('timeList', timeList)\n    let totalHour = 0, totalMin = 0, totalSec = 0\n    timeList.forEach((item) => {\n      let arr = moment(item.time).format(\"HH:mm:ss\").split(\":\")\n      totalHour += parseInt(arr[0], 10)\n      totalMin += parseInt(arr[1], 10)\n      totalSec += parseInt(arr[2], 10)\n    })\n    let averageTime = Math.floor(totalHour / timeList.length) + \":\" + Math.floor(totalMin / timeList.length) + \":\" + Math.floor(totalSec / timeList.length)\n    let timePoint = [\n                      {point: \"20:00:00\", class: \"warning\"},\n                      {point: \"21:00:00\", class: \"normal\"},\n                      {point: \"22:00:00\", class: \"excellent\"},\n                      {point: \"23:00:00\", class: \"amazing\"},\n                      {point: \"24:00:00\", class: \"dying\"},\n                    ]\n    let timePointItem = timePoint.find((item) => {\n      return moment(averageTime, \"HH:mm:ss\").valueOf() < moment(item.point, \"HH:mm:ss\").valueOf()\n    })\n    let averageTimeClass = timePointItem ? timePointItem : \"normal\"\n    return (\n      <div className=\"app\">\n        <h1>下班平均时间计算系统</h1>\n        <p className={`average-time ${averageTimeClass}`}>平均下班时间:<span>{averageTime === \"NaN:NaN:NaN\" ? \"本月暂无统计\" : averageTime}</span></p>\n        <ul>\n          {\n            timeList.map((item, index) =>\n              <li key={index}>\n                <h2>日期:</h2>\n                <p className=\"date\">{moment(item.time).format(\"YYYY-MM-DD\")}</p>\n                <h2>下班时间:</h2>\n                <p className=\"time\">{moment(item.time).format(\"HH:mm:ss\")}</p>\n                <span className=\"delete\" onClick={this.delete.bind(this, index, moment(item.time).format(\"YYYY-MM-DD\"))}></span>\n              </li>\n            )\n          }\n        </ul>\n        <button onClick={this.signOff}>签退</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}